app = dict()
def callback(path):  # TODO Определение функции должно отделяться от остального кода двумя пустыми строками
    def decorator(func):
        #  тут надо помещать в словарь app запись вида
        #    "ссылка": функция
        app[path] = func
        def wrapper(*args, **kwargs):  # TODO а вложенная функция - выделяется одной пустой строкой
            if path in app:
                result = func(*args, **kwargs)
                return result
        return wrapper
    return decorator


@callback('//')
def route():
    print('Пример функции, которая возвращает ответ сервера')
    return 'OK'


route = app.get('//')     #не понял куда эта строчка
#  Нужна не только эта строчка, но и определение пустронр словаря app (см. шаблон решения в задании) Это словарь
#  для хранения связи урла и функции которая обрабатывает запрос по этому урлу. Если вы сталкивались с вебом-разработкой
#  (возможно), то там это называется роутингом, то есть маршрутизацией запросов от клиента (браузера).
#  Когда на сервер приходит запрос от браузера, то приложение "смотрит" в роутинг (тут это app) и вызывает функцию
#  которая ответственна за обработку такого запроса. Поэтому нам нужен декоратор вся миссия которого - привязать функцию
#  обработки запроса по конкретному урлу с функцией его обрабатывающей. Для этого надо просто помещать запись в словарь
#  во время декорации (это важно - не во время вызова декорированной функции!) вида {url: response_function}

if route:
    response = route()
    print('Ответ:', response)
else:
    print('Такого пути нет')
